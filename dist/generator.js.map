{"version":3,"sources":["../src/generator.js"],"names":["getJarPath","vendorDirectory","path","resolve","__dirname","files","fs","readdirSync","jarFiles","filter","file","endsWith","sort","reverse","length","message","Error","join","getLocalImage","code","PCancelable","reject","onCancel","proc","shouldReject","kill","process","nextTick","stdin","write","end","catch","on","err","getStream","buffer","stdout","then","toString","getServerImage","url","Promise","createImageURL","inkdrop","config","get"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,SAASA,UAAT,GAAsB;AACpB,QAAMC,eAAe,GAAGC,IAAI,CAACC,OAAL,CAAaC,SAAb,EAAwB,WAAxB,CAAxB;AACA,QAAMC,KAAK,GAAGC,EAAE,CAACC,WAAH,CAAeN,eAAf,CAAd;AAEA,QAAMO,QAAQ,GAAGH,KAAK,CACnBI,MADc,CACPC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAc,MAAd,CADD,EAEdC,IAFc,GAGdC,OAHc,EAAjB;;AAKA,MAAIL,QAAQ,CAACM,MAAT,KAAoB,CAAxB,EAA2B;AACzB,UAAMC,OAAO,GAAI,4CAA2Cd,eAAgB,EAA5E;AACA,UAAM,IAAIe,KAAJ,CAAUD,OAAV,CAAN;AACD;;AAED,SAAOb,IAAI,CAACe,IAAL,CAAUhB,eAAV,EAA2BO,QAAQ,CAAC,CAAD,CAAnC,CAAP;AACD;;AAED,SAASU,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO,IAAIC,oBAAJ,CAAgB,CAACjB,OAAD,EAAUkB,MAAV,EAAkBC,QAAlB,KAA+B;AACpD,QAAI;AACF,YAAMC,IAAI,GAAG,oBAAM,MAAN,EAAc,CACzB,MADyB,EAEzB,0BAFyB,EAGzBvB,UAAU,EAHe,EAIzB,OAJyB,EAKzB,OALyB,CAAd,CAAb;AAQAsB,MAAAA,QAAQ,CAACE,YAAT,GAAwB,KAAxB;AACAF,MAAAA,QAAQ,CAAC,MAAM;AACbC,QAAAA,IAAI,CAACE,IAAL;AACD,OAFO,CAAR;AAIAC,MAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACrBJ,QAAAA,IAAI,CAACK,KAAL,CAAWC,KAAX,CAAiBV,IAAjB;AACAI,QAAAA,IAAI,CAACK,KAAL,CAAWE,GAAX;AACD,OAHD;AAKAP,MAAAA,IAAI,CAACQ,KAAL,CAAW,MAAM,CAAE,CAAnB;AAEAR,MAAAA,IAAI,CAACS,EAAL,CAAQ,OAAR,EAAiBC,GAAG,IAAI;AACtB,YAAIA,GAAG,CAACd,IAAJ,KAAa,QAAjB,EAA2B;AACzBE,UAAAA,MAAM,CAAC,IAAIL,KAAJ,CAAW,kDAAX,CAAD,CAAN;AACD,SAFD,MAEO;AACLK,UAAAA,MAAM,CAACY,GAAD,CAAN;AACD;AACF,OAND;;AAQAC,yBACGC,MADH,CACUZ,IAAI,CAACa,MADf,EAEGC,IAFH,CAEQF,MAAM,IAAI;AACdhC,QAAAA,OAAO,CAAC,2BAA2BgC,MAAM,CAACG,QAAP,CAAgB,QAAhB,CAA5B,CAAP;AACD,OAJH,EAKGP,KALH,CAKSE,GAAG,IAAIZ,MAAM,CAACY,GAAG,CAAClB,OAAL,CALtB;AAMD,KAnCD,CAmCE,OAAOkB,GAAP,EAAY;AACZZ,MAAAA,MAAM,CAACY,GAAD,CAAN;AACD;AACF,GAvCM,CAAP;AAwCD;;AAED,SAASM,cAAT,CAAwBpB,IAAxB,EAA8BqB,GAA9B,EAAmC;AACjC,SAAOC,OAAO,CAACtC,OAAR,CAAgBD,IAAI,CAACe,IAAL,CAAUuB,GAAV,EAAe,KAAf,EAAsB,6BAAOrB,IAAP,CAAtB,CAAhB,CAAP;AACD;;AAEM,SAASuB,cAAT,CAAwBvB,IAAxB,EAA8B;AACnC,MAAIwB,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmB,eAAnB,MAAwC,OAA5C,EAAqD;AACnD,WAAO3B,aAAa,CAACC,IAAD,CAApB;AACD,GAFD,MAEO;AACL,WAAOoB,cAAc,CAACpB,IAAD,EAAOwB,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmB,oBAAnB,CAAP,CAArB;AACD;AACF","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs';\nimport { encode } from 'plantuml-encoder';\nimport execa from 'execa';\nimport getStream from 'get-stream';\nimport PCancelable from 'p-cancelable';\n\nfunction getJarPath() {\n  const vendorDirectory = path.resolve(__dirname, '../vendor');\n  const files = fs.readdirSync(vendorDirectory);\n\n  const jarFiles = files\n    .filter(file => file.endsWith('.jar'))\n    .sort()\n    .reverse();\n\n  if (jarFiles.length === 0) {\n    const message = `Please ensure there is a PlantUML jar in ${vendorDirectory}`;\n    throw new Error(message);\n  }\n\n  return path.join(vendorDirectory, jarFiles[0]);\n}\n\nfunction getLocalImage(code) {\n  return new PCancelable((resolve, reject, onCancel) => {\n    try {\n      const proc = execa('java', [\n        '-jar',\n        '-Djava.awt.headless=true',\n        getJarPath(),\n        '-tpng',\n        '-pipe',\n      ]);\n\n      onCancel.shouldReject = false;\n      onCancel(() => {\n        proc.kill();\n      });\n\n      process.nextTick(() => {\n        proc.stdin.write(code);\n        proc.stdin.end();\n      });\n\n      proc.catch(() => {});\n\n      proc.on('error', err => {\n        if (err.code === 'ENOENT') {\n          reject(new Error(`Please make sure Java is available on your PATH.`));\n        } else {\n          reject(err);\n        }\n      });\n\n      getStream\n        .buffer(proc.stdout)\n        .then(buffer => {\n          resolve('data:image/png;base64,' + buffer.toString('base64'));\n        })\n        .catch(err => reject(err.message));\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nfunction getServerImage(code, url) {\n  return Promise.resolve(path.join(url, 'img', encode(code)));\n}\n\nexport function createImageURL(code) {\n  if (inkdrop.config.get('plantuml.mode') === 'Local') {\n    return getLocalImage(code);\n  } else {\n    return getServerImage(code, inkdrop.config.get('plantuml.serverUrl'));\n  }\n}\n"],"file":"generator.js"}