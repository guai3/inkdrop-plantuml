{"version":3,"sources":["../src/PlantUML.jsx"],"names":["PlantUML","React","Component","constructor","props","currentPromise","state","image","error","containerRef","createRef","componentWillMount","subscriptions","CompositeDisposable","configCallback","renderDiagram","key","configKey","disposable","inkdrop","config","onDidChange","add","componentWillUnmount","dispose","cancel","componentDidMount","current","parentElement","classList","componentDidUpdate","previousProps","hasCodeChanged","shouldComponentUpdate","nextProps","nextState","render","code","getCode","trim","length","renderError","message","then","url","setState","catch","err","children","otherProps","propTypes","PropTypes","node"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CompositeDisposable } from 'event-kit';\nimport { createImageURL } from './generator';\n\nexport class PlantUML extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.currentPromise = null;\n\n    this.state = {\n      image: '',\n      error: null,\n    };\n\n    this.containerRef = React.createRef();\n  }\n\n  componentWillMount() {\n    this.subscriptions = new CompositeDisposable();\n\n    const configCallback = () => this.renderDiagram();\n\n    for (const key of ['mode', 'serverUrl']) {\n      const configKey = `plantuml.${key}`;\n      const disposable = inkdrop.config.onDidChange(configKey, configCallback);\n      this.subscriptions.add(disposable);\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscriptions.dispose();\n\n    if (this.currentPromise !== null) {\n      this.currentPromise.cancel();\n    }\n  }\n\n  componentDidMount() {\n    this.renderDiagram();\n\n    this.containerRef.current.parentElement.classList.add('plantuml-container');\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.hasCodeChanged(previousProps)) {\n      this.renderDiagram();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.hasCodeChanged(nextProps) ||\n      nextState.image !== this.state.image ||\n      nextState.error !== this.state.error\n    );\n  }\n\n  render() {\n    const { image, error } = this.state;\n    const code = this.getCode();\n\n    if (code.trim().length === 0) {\n      return this.renderError('No PlantUML code given.');\n    }\n\n    if (error !== null) {\n      return this.renderError(error.message);\n    }\n\n    if (image === 'data:image/png;base64,') {\n      return <div ref={this.containerRef} />;\n    }\n\n    return <img src={image} ref={this.containerRef} />;\n  }\n\n  renderError(message) {\n    return (\n      <div className=\"ui error message plantuml-error\" ref={this.containerRef}>\n        <div className=\"header\">Failed to render PlantUML</div>\n        <div>{message}</div>\n      </div>\n    );\n  }\n\n  renderDiagram() {\n    if (this.currentPromise !== null) {\n      this.currentPromise.cancel();\n    }\n\n    this.currentPromise = createImageURL(this.getCode());\n    this.currentPromise\n      .then(url => {\n        this.setState({\n          image: url,\n          error: null,\n        });\n      })\n      .catch(err => {\n        this.setState({\n          image: '',\n          error: err,\n        });\n      });\n  }\n\n  getCode(props = this.props) {\n    return props.children[0];\n  }\n\n  hasCodeChanged(otherProps) {\n    return this.getCode() !== this.getCode(otherProps);\n  }\n}\n\nPlantUML.propTypes = {\n  children: PropTypes.node,\n};\n"],"file":"PlantUML.js"}