{"version":3,"sources":["../src/jar.js"],"names":["pipeline","util","promisify","stream","updateLock","downloadDirectLink","url","filePath","retries","console","log","Error","got","timeout","connect","fs","createWriteStream","err","TimeoutError","currentTimestamp","exec","newTimestamp","parseInt","newUrl","replace","download","urlSuffix","suffixWithoutSlash","substr","mirrorUrl","mirrorResponse","retry","mirrorBody","body","directLink","shouldCheckForJarUpdates","lastCheckStr","inkdrop","config","get","lastCheck","now","Date","getTime","updateCheckInterval","checkForJarUpdates","force","alert","set","feedUrl","feed","Parser","parseURL","latestJarItem","items","find","item","test","title","currentJarPath","getJarPath","currentJar","path","basename","latestJar","message","confirm","jarUrlSuffix","jarDirectory","dirname","jarFilename","jarLocation","join","tmpLocation","temp","suffix","renameSync","error","vendorDirectory","resolve","__dirname","files","readdirSync","jarFiles","filter","file","endsWith","sort","reverse","length"],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as util from 'util';\nimport * as stream from 'stream';\nimport Parser from 'rss-parser';\nimport got from 'got';\nimport temp from 'temp';\n\nconst pipeline = util.promisify(stream.pipeline);\n\nlet updateLock = false;\n\nasync function downloadDirectLink(url, filePath, retries) {\n  console.log(retries, url);\n\n  if (retries < 0) {\n    throw new Error(`Could not download ${url}, too many retries`);\n  }\n\n  try {\n    const stream = got.stream(url, {\n      timeout: {\n        connect: 2500,\n      },\n    });\n\n    await pipeline(stream, fs.createWriteStream(filePath));\n  } catch (err) {\n    if (err instanceof got.TimeoutError) {\n      const currentTimestamp = /ts=(\\d+)/.exec(url)[1];\n      const newTimestamp = parseInt(currentTimestamp, 10) + 1;\n      const newUrl = url.replace(currentTimestamp, newTimestamp);\n\n      return downloadDirectLink(newUrl, filePath, retries - 1);\n    }\n\n    throw err;\n  }\n}\n\nasync function download(urlSuffix, filePath) {\n  const suffixWithoutSlash = urlSuffix.substr(1);\n  const mirrorUrl = `https://sourceforge.net/settings/mirror_choices?projectname=plantuml&filename=${suffixWithoutSlash}`;\n  const mirrorResponse = await got(mirrorUrl, {\n    timeout: {\n      connect: 2500,\n    },\n    retry: 5,\n  });\n\n  const mirrorBody = mirrorResponse.body;\n  const directLink = /<a href=\"([^\"]+)\">direct link<\\/a>/.exec(mirrorBody)[1];\n\n  await downloadDirectLink(directLink, filePath, 5);\n}\n\nexport function shouldCheckForJarUpdates() {\n  const lastCheckStr = inkdrop.config.get('plantuml.lastUpdateCheck');\n  const lastCheck = parseInt(lastCheckStr || 0, 10);\n  const now = new Date().getTime();\n\n  const updateCheckInterval = 24 * 60 * 60 * 1000;\n\n  return now - lastCheck >= updateCheckInterval;\n}\n\nexport async function checkForJarUpdates(force) {\n  if (updateLock) {\n    if (force) {\n      alert('Already checking for updates and/or downloading an update.');\n    }\n\n    return;\n  }\n\n  if (!force && !shouldCheckForJarUpdates()) {\n    return;\n  }\n\n  inkdrop.config.set('plantuml.lastUpdateCheck', new Date().getTime());\n\n  try {\n    updateLock = true;\n\n    const feedUrl = 'https://sourceforge.net/projects/plantuml/rss?path=/';\n    const feed = await new Parser().parseURL(feedUrl);\n\n    const latestJarItem = feed.items.find(item => {\n      return /plantuml([.0-9]+)\\.jar/.test(item.title);\n    });\n\n    const currentJarPath = getJarPath();\n    const currentJar = path.basename(currentJarPath);\n    const latestJar = path.basename(latestJarItem.title);\n\n    if (currentJar !== latestJar) {\n      const message = `PlantUML update found (${currentJar} -> ${latestJar}). Do you want to update?`;\n      if (confirm(message)) {\n        const jarUrlSuffix = latestJarItem.title;\n\n        const jarDirectory = path.dirname(currentJarPath);\n        const jarFilename = path.basename(latestJarItem.title);\n        const jarLocation = path.join(jarDirectory, jarFilename);\n\n        const tmpLocation = temp.path({ suffix: '.jar' });\n\n        await download(jarUrlSuffix, tmpLocation);\n        fs.renameSync(tmpLocation, jarLocation);\n      }\n    } else if (force) {\n      alert('PlantUML jar is already of the latest version.');\n    }\n  } catch (err) {\n    console.error('PlantUML update error', err);\n  } finally {\n    updateLock = false;\n  }\n}\n\nexport function getJarPath() {\n  const vendorDirectory = path.resolve(__dirname, '../vendor');\n  const files = fs.readdirSync(vendorDirectory);\n\n  const jarFiles = files\n    .filter(file => file.endsWith('.jar'))\n    .sort()\n    .reverse();\n\n  if (jarFiles.length === 0) {\n    const message = `Please ensure there is a PlantUML jar in ${vendorDirectory}`;\n    throw new Error(message);\n  }\n\n  return path.join(vendorDirectory, jarFiles[0]);\n}\n"],"file":"jar.js"}