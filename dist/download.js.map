{"version":3,"sources":["../src/download.js"],"names":["download","url","filePath","Promise","resolve","reject","https","get","res","statusCode","headers","location","undefined","then","catch","message","Error"],"mappings":";;;;;;;AAAA;;;;;;AAEO,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,QAAvB,EAAiC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACC,GAAN,CAAUN,GAAV,EAAeO,GAAG,IAAI;AACpB,UAAIA,GAAG,CAACC,UAAJ,KAAmB,GAAvB,EAA4B,CAE3B,CAFD,MAEO,IAAID,GAAG,CAACE,OAAJ,CAAYC,QAAZ,KAAyBC,SAA7B,EAAwC;AAC7CZ,QAAAA,QAAQ,CAACQ,GAAG,CAACE,OAAJ,CAAYC,QAAb,EAAuBT,QAAvB,CAAR,CACGW,IADH,CACQT,OADR,EAEGU,KAFH,CAEST,MAFT;AAGD,OAJM,MAIA;AACL,cAAMU,OAAO,GAAI,cAAad,GAAI,4BAA2BO,GAAG,CAACC,UAAW,EAA5E;AACAJ,QAAAA,MAAM,CAAC,IAAIW,KAAJ,CAAUD,OAAV,CAAD,CAAN;AACD;AACF,KAXD;AAYD,GAbM,CAAP;AAcD","sourcesContent":["import * as https from 'https';\n\nexport function download(url, filePath) {\n  return new Promise((resolve, reject) => {\n    https.get(url, res => {\n      if (res.statusCode === 200) {\n\n      } else if (res.headers.location !== undefined) {\n        download(res.headers.location, filePath)\n          .then(resolve)\n          .catch(reject);\n      } else {\n        const message = `Request to ${url} failed with status code ${res.statusCode}`;\n        reject(new Error(message));\n      }\n    });\n  });\n}\n"],"file":"download.js"}